# -*- coding: utf-8 -*-
#This file generates the drive team input
import wx
import csv
import module_locator
import json

#locate the Package
myPath = module_locator.module_path()

#import match schedule from json generated by PullMatchSchedule.py
matchSchedule = json.load(open(myPath + "/matchSchedule.json","r"))

class Panel(wx.Panel):
    global autonSwitch
    autonSwitch = 0
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        #Identifiers
        self.nameTitle = wx.StaticText(self, label="Drive Team Input", pos=(20, 30))
        self.matchNumTitle = wx.StaticText(self, label="Match #", pos=(20, 80))
        self.teamNumTitle = wx.StaticText(self, label="Team #", pos=(350, 80))
        self.matchNumInput = wx.TextCtrl(self, pos=(120, 80), size = (100, 20))
        self.teamNumInput = wx.ComboBox(self, pos=(450, 80), size = (100, 25), style=wx.CB_DROPDOWN)

        # self.robotRatingTitle = wx.StaticText(self, label="On a scale 1 to 10, how is this robot?", pos=(20, 120))
        self.confident = wx.RadioBox(self, label="Is this drive team confident playing on the field?", pos=(20, 120), choices=["1", "2", "3", "4", "5"])
        self.rules = wx.RadioBox(self, label="Is this drive team reasonably familiar with the game rules?", pos=(20, 180), choices=["1", "2", "3", "4", "5"])
        self.pressure = wx.RadioBox(self, label="Does this drive team perform well under pressure?", pos=(20, 240), choices=["1", "2", "3", "4", "5"])
        self.commentsTitle = wx.StaticText(self, label="Any other comments?", pos=(20, 320))
        self.commentsInput = wx.TextCtrl(self, pos=(20,340), size=(400,20))


        self.submitButton = wx.Button(self, 10, "Submit Match Data!", pos=(600,700))


        #Bindings
        self.matchNumInput.Bind(wx.EVT_TEXT, self.Team_Match)
        self.submitButton.Bind(wx.EVT_BUTTON, self.CSV_OUTPUT)

    def Team_Match(self, event):
        self.teamNumInput.Clear()
        matchNum = int(self.matchNumInput.GetValue())
        for i in range(0, len(matchSchedule)):
            if matchSchedule[i]["comp_level"] == "qm" and matchSchedule[i]["match_number"] == matchNum:
                redTeam = matchSchedule[i]["alliances"]["red"]["team_keys"]
                blueTeam = matchSchedule[i]["alliances"]["blue"]["team_keys"]
        red = 1
        blue = 1
        for t in redTeam:
            t = t.replace("frc", "Red"+str(red)+"  ")
            self.teamNumInput.Append(t)
            red += 1
        for t in blueTeam:
            t = t.replace("frc", "Blue"+str(blue)+"  ")
            self.teamNumInput.Append(t)
            blue += 1
        # self.teamNumInput.GetChildren()[1].SetBackgroundColour(red)

    def Number_Change(self, event):
        btn = event.GetEventObject().GetName()
        if btn.endswith("InputUp"):
            textName = btn.replace("InputUp", "")
            num = int(eval("self."+textName+"Input").GetValue())
            eval("self."+textName+"Input").Clear()
            eval("self."+textName+"Input").AppendText(str(num + 1))
        elif btn.endswith("InputDown"):
            textName = btn.replace("InputDown", "")
            num = int(eval("self."+textName+"Input").GetValue())
            eval("self."+textName+"Input").Clear()
            eval("self."+textName+"Input").AppendText(str(num - 1))

    def CSV_OUTPUT(self, event):
        with open('entry.csv', 'w') as csvfile:
            fieldnames = ['name','matchNumber','teamNumber','baseline','autonSwitch','autonScale','autonPZ','autonPCZ','autonExchange','teleopSwitch','teleopScale','teleopExchange','teleopOppoSwitch','teleopFromExchange','teleopFromPZ','teleopFromPCZ','robotOnPlatform','robotClimb','buddyBar','strategies','penalties']

            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()
            writer.writerow({'name':self.nameInput.GetValue(), 'matchNumber':self.matchNumInput.GetValue(), 'teamNumber':self.teamNumInput.GetValue(), 'baseline':self.baselineInput.GetValue(), 'autonSwitch':self.autonSwitchInput.GetValue(), 'autonScale':self.autonScaleInput.GetValue(), 'autonPZ':self.autonPlatformInput.GetValue(), 'autonPCZ':self.autonPowerCubeInput.GetValue(), 'autonExchange':self.autonExchangeInput.GetValue(), 'teleopSwitch':self.teleOpSwitchInput.GetValue(), 'teleopScale':self.teleOpScaleInput.GetValue(), 'teleopExchange':self.teleOpExchangeInput.GetValue(), 'teleopOppoSwitch':self.teleOpOppoSwitchInput.GetValue(), 'teleopFromExchange':self.teleOpFromExchangeInput.GetValue(), 'teleopFromPZ':self.teleOpFromPlatformInput.GetValue(), 'teleopFromPCZ':self.teleOpFromPowerCubeInput.GetValue(), 'robotOnPlatform':self.teleOpParked.GetSelection(), 'robotClimb':self.teleOpClimbed.GetSelection(), 'buddyBar':self.teleOpTeamwork.GetSelection(), 'strategies':self.strategyInput.GetValue(), 'penalties':self.penaltyInput.GetValue()})


app = wx.App(False)
frame = wx.Frame(None, title = "1218 Vulcan Scouting Drive Team Input", size = (800, 800))
panel = Panel(frame)
frame.Show()
app.MainLoop()
