# -*- coding: utf-8 -*-
#This file generates the drive team input
import wx
import csv
import module_locator
import json
import os
from pathlib2 import Path
from datetime import datetime

#locate the Package
myPath = module_locator.module_path()

#import match schedule from json generated by PullMatchSchedule.py
matchSchedule = json.load(open(myPath + "/matchSchedule.json","r"))

class Panel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        #Identifiers
        self.nameTitle = wx.StaticText(self, label="Drive Team Input", pos=(20, 30))
        self.matchNumTitle = wx.StaticText(self, label="Match #", pos=(20, 60))
        self.teamNumTitle = wx.StaticText(self, label="Team #", pos=(350, 60))
        self.matchNumInput = wx.TextCtrl(self, pos=(120, 60), size = (100, 20))
        self.teamNumInput = wx.ComboBox(self, pos=(450, 60), size = (100, 25), style=wx.CB_READONLY)

        # self.robotRatingTitle = wx.StaticText(self, label="On a scale 1 to 10, how is this robot?", pos=(20, 120))
        self.label = wx.StaticText(self, label="Is this drive team confident playing on the field?", pos=(20, 100))
        self.confident = wx.RadioBox(self, pos=(20, 120), choices=["1", "2", "3", "4", "5"])

        self.label = wx.StaticText(self, label="Is this drive team reasonably familiar with the game rules?", pos=(20, 160))
        self.rules = wx.RadioBox(self, pos=(20, 180), choices=["1", "2", "3", "4", "5"])

        self.label = wx.StaticText(self, label="Does this drive team perform well under pressure?", pos=(20, 220))
        self.pressure = wx.RadioBox(self, pos=(20, 240), choices=["1", "2", "3", "4", "5"])
        self.commentsTitle = wx.StaticText(self, label="Any other comments?", pos=(20, 320))
        self.commentsInput = wx.TextCtrl(self, pos=(20,340), size=(400,20))


        self.submitButton = wx.Button(self, 10, "Submit Match Data!", pos=(400,400))
        self.submitButton.Enable(False)


        #Bindings
        self.matchNumInput.Bind(wx.EVT_TEXT, self.Team_Match)
        self.submitButton.Bind(wx.EVT_BUTTON, self.CSV_OUTPUT)
        self.matchNumInput.Bind(wx.EVT_TEXT, self.Enable_Submit)
        # self.teamNumInput.Bind(wx.EVT_TEXT, self.Enable_Submit)
        self.teamNumInput.Bind(wx.EVT_COMBOBOX, self.Enable_Submit)

    def Enable_Submit(self, event):
        if self.matchNumInput.GetValue() != "" and self.teamNumInput.GetValue() != "":
            self.submitButton.Enable()
        else:
            self.submitButton.Enable(False)
        event.Skip()

    def Team_Match(self, event):
        self.teamNumInput.Clear()
        matchNum = int(self.matchNumInput.GetValue())
        for i in range(0, len(matchSchedule)):
            if matchSchedule[i]["comp_level"] == "qm" and matchSchedule[i]["match_number"] == matchNum:
                redTeam = matchSchedule[i]["alliances"]["red"]["team_keys"]
                blueTeam = matchSchedule[i]["alliances"]["blue"]["team_keys"]
        red = 1
        blue = 1
        for t in redTeam:
            t = t.replace("frc", "Red"+str(red)+"  ")
            self.teamNumInput.Append(t)
            red += 1
        for t in blueTeam:
            t = t.replace("frc", "Blue"+str(blue)+"  ")
            self.teamNumInput.Append(t)
            blue += 1
        # self.teamNumInput.GetChildren()[1].SetBackgroundColour(red)
        event.Skip()



    def CSV_OUTPUT(self, event):
        teamNum = ""
        # print self.teamNumInput.GetValue()
        if self.teamNumInput.GetValue().startswith("R"):
            teamNum = self.teamNumInput.GetValue().replace(self.teamNumInput.GetValue()[0:6], "")
        elif self.teamNumInput.GetValue().startswith("B"):
            teamNum = self.teamNumInput.GetValue().replace(self.teamNumInput.GetValue()[0:7], "")

        filename = "DRIVETEAM"
         # + "_match" + self.matchNumInput.GetValue() + "_team" + teamNum

        if not Path(myPath + "/ScoutingData", filename + '.csv').exists():
            with open(os.path.join(myPath + "/ScoutingData", filename + '.csv'), 'w') as csvfile:
                fieldnames = ['name','matchNumber','teamNumber','confidenceRating','rulesRating','pressureRating','comments','timeStamp']

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                writer.writeheader()

                writer.writerow({'name':"DRIVETEAM",'matchNumber':self.matchNumInput.GetValue(),'teamNumber':teamNum,'confidenceRating':self.confident.GetItemLabel(self.confident.GetSelection()),'rulesRating':self.rules.GetItemLabel(self.rules.GetSelection()),'pressureRating':self.pressure.GetItemLabel(self.pressure.GetSelection()),'comments':self.commentsInput.GetValue(),'timeStamp':datetime.now().time()})
        else:
            with open(os.path.join(myPath + "/ScoutingData", filename + '.csv'), 'a') as csvfile:
                fieldnames = ['name','matchNumber','teamNumber','confidenceRating','rulesRating','pressureRating','comments','timeStamp']

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                # writer.writeheader()
                writer.writerow({'name':"DRIVETEAM",'matchNumber':self.matchNumInput.GetValue(),'teamNumber':teamNum,'confidenceRating':self.confident.GetItemLabel(self.confident.GetSelection()),'rulesRating':self.rules.GetItemLabel(self.rules.GetSelection()),'pressureRating':self.pressure.GetItemLabel(self.pressure.GetSelection()),'comments':self.commentsInput.GetValue(),'timeStamp':datetime.now().time()})


        self.matchNumInput.Clear()
        self.teamNumInput.Clear()
        self.confident.SetSelection(0)
        self.rules.SetSelection(0)
        self.pressure.SetSelection(0)
        self.commentsInput.Clear()

        # os.system("open -a /Applications/Utilities/Bluetooth\ File\ Exchange.app " + myPath + "/ScoutingData/" + filename + ".csv")
        event.Skip()




app = wx.App(False)
frame = wx.Frame(None, title = "1218 Vulcan Scouting Drive Team Input", size = (650, 500))
panel = Panel(frame)
frame.Show()
app.MainLoop()
